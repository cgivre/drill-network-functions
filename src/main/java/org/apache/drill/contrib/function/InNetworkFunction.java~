package org.apache.drill.contrib.function;

import com.google.common.base.Strings;
import io.netty.buffer.DrillBuf;
import org.apache.drill.exec.expr.DrillSimpleFunc;
import org.apache.drill.exec.expr.annotations.FunctionTemplate;
import org.apache.drill.exec.expr.annotations.Output;
import org.apache.drill.exec.expr.annotations.Param;
import org.apache.drill.exec.expr.holders.BitHolder;
import org.apache.drill.exec.expr.holders.VarCharHolder;
import org.apache.commons.net.util.SubnetUtils;

import javax.inject.Inject;


@FunctionTemplate(
        name = "in_network",
        scope = FunctionTemplate.FunctionScope.SIMPLE,
        nulls = FunctionTemplate.NullHandling.NULL_IF_NULL
)
public class InNetworkFunction implements DrillSimpleFunc {

    @Param 
	VarCharHolder input_ip;

	@Param 
	VarCharHolder input_cidr;
	
	@Output 
	BitHolder out;

  	@Inject
	DrillBuf buffer;


    public void setup() {
    }


    public void eval() {
		
		String ip_string = org.apache.drill.exec.expr.fn.impl.StringFunctionHelpers.toStringFromUTF8(input_ip.start, input_ip.end, input_ip.buffer);
		
		String cidr_string = org.apache.drill.exec.expr.fn.impl.StringFunctionHelpers.toStringFromUTF8(input_cidr.start, input_cidr.end, input_cidr.buffer);
					
		SubnetUtils utils = new SubnetUtils(subnet);
        SubnetInfo info = utils.getInfo();
        
		/*long inputInt = in1.value;

		for (int i = 0; i < 4; i++) {

			result.insert(0,Long.toString(inputInt & 0xff));

			if (i < 3) {
				result.insert(0,'.');
			}

			inputInt = inputInt >> 8;
		}
		
		String outputValue = result.toString();

		out.buffer = buffer;
    	out.start = 0;
    	out.end = outputValue.getBytes().length;
    	buffer.setBytes(0, outputValue.getBytes());*/
    }


}


